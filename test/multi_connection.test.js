// Generated by CoffeeScript 1.8.0
(function() {
  var inspect, ps, puts, test_helper, _ref;

  _ref = require('util'), puts = _ref.puts, inspect = _ref.inspect;

  ps = require('../lib');

  test_helper = require('./test_helper');

  describe('MultiConnection', function() {
    beforeEach(function(done) {
      this.clientAlpha = new test_helper.ClientStub;
      this.clientBeta = new test_helper.ClientStub;
      this.poolAlpha = new test_helper.PoolStub(this.clientAlpha);
      this.poolBeta = new test_helper.PoolStub(this.clientBeta);
      this.schemaAlpha1 = 'shard_0001';
      this.schemaAlpha2 = 'shard_0002';
      this.schemaBeta3 = 'shard_0003';
      this.schemaBeta4 = 'shard_0004';
      this.poolsAndShards = [[this.poolAlpha, [this.schemaAlpha1, this.schemaAlpha2]], [this.poolBeta, [this.schemaBeta3, this.schemaBeta4]]];
      this.multiConnection = new ps.MultiConnection(this.poolsAndShards);
      return done();
    });
    it('should be a MultiConnection', function(done) {
      this.multiConnection.should.be.an.instanceOf(ps.MultiConnection);
      return done();
    });
    return it('should send sql query to all pools and shards', function(done) {
      var sql;
      sql = "SELECT * FROM stuffs;";
      return this.multiConnection.query(sql, (function(_this) {
        return function(err, result) {
          _this.clientAlpha.queries[0].should.containEql(_this.schemaAlpha1);
          _this.clientAlpha.queries[1].should.equal(sql);
          _this.clientAlpha.queries[2].should.containEql(_this.schemaAlpha2);
          _this.clientAlpha.queries[3].should.equal(sql);
          _this.clientBeta.queries[0].should.containEql(_this.schemaBeta3);
          _this.clientBeta.queries[1].should.equal(sql);
          _this.clientBeta.queries[2].should.containEql(_this.schemaBeta4);
          _this.clientBeta.queries[3].should.equal(sql);
          return done();
        };
      })(this));
    });
  });

}).call(this);
